From 7991e4fde2d4885760a8662db855c03150c6253f Mon Sep 17 00:00:00 2001
From: Mohammed Touhid Chowdhury <yomtc405@nyu.edu>
Date: Sun, 29 Oct 2017 13:19:59 -0400
Subject: [PATCH] Implement lottery scheduling

---
 Makefile  |  1 +
 proc.c    | 36 ++++++++++++++++++++++++++++++++++--
 proc.h    |  2 ++
 syscall.c |  2 ++
 syscall.h |  1 +
 sysproc.c | 12 ++++++++++++
 user.h    |  1 +
 usys.S    |  1 +
 8 files changed, 54 insertions(+), 2 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/proc.c b/proc.c
index b122e3b..151606d 100644
--- a/proc.c
+++ b/proc.c
@@ -270,19 +270,46 @@ scheduler(void)
 {
   struct proc *p;
   int foundproc = 1;
+  int totalTickets = 0;
+  long counter = 0;
+  int foundTotal = 0;
+  int foundWinner = 0;
+  long winner;
 
   for(;;){
     // Enable interrupts on this processor.
+
     sti();
 
     if (!foundproc) hlt();
-    foundproc = 0;
+    if (foundTotal == 1) {
+       foundproc = 0;
+       winner = random_at_most(totalTickets);
+       totalTickets = 0;
+       counter = 0;
+       foundWinner = 0;
+    }
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
+      
+      if(p->state != RUNNABLE){
+        continue;
+        }
+      if (foundTotal == 0) {
+        totalTickets += p->tickets;
         continue;
+        }
+      counter += p->tickets;
+      if (counter < winner) {
+         totalTickets += p->tickets;
+         continue;
+      } 
+      if (foundWinner) {
+         totalTickets += p->tickets;
+         continue;
+      }
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -296,9 +323,14 @@ scheduler(void)
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
+      if (p->state == RUNNABLE) {
+        totalTickets += p->tickets;
+	foundWinner = 1;
+      }
       proc = 0;
     }
     release(&ptable.lock);
+    foundTotal = 1; 
 
   }
 }
diff --git a/proc.h b/proc.h
index 3b9c3ac..65232e1 100644
--- a/proc.h
+++ b/proc.h
@@ -66,6 +66,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int tickets;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..e59bc4a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_gettime 22
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..b4d078a 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -98,3 +98,15 @@ sys_gettime(void) {
   cmostime(d);
   return 0;
 }
+
+int
+sys_settickets(void) {
+  int n;
+  if(argint(0, &n) < 0) {
+     proc->tickets = 10;
+     }
+  else {
+     proc->tickets = n;
+     }
+     return 0;
+}
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

